
lab7_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000028  00000000  00000000  000008b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a4  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000070  00000000  00000000  0000097f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020f  00000000  00000000  000009ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000009a  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <latch_it>:
#define in PINC

// 'Защёлкивание' адреса в регистре
void latch_it(void)
{ 
	cle;
  6c:	91 98       	cbi	0x12, 1	; 18
	asm("nop");
  6e:	00 00       	nop
	sle;
  70:	91 9a       	sbi	0x12, 1	; 18
	asm("nop");
  72:	00 00       	nop
	cle;
  74:	91 98       	cbi	0x12, 1	; 18
}
  76:	08 95       	ret

00000078 <main>:

int main()
{ 
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
	uchar temp;
	SPL = 0x54;
  7e:	84 e5       	ldi	r24, 0x54	; 84
  80:	8d bf       	out	0x3d, r24	; 61
	SPH = 0x04;
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	8e bf       	out	0x3e, r24	; 62
	// Инициализация порта PD
	DDRD = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	81 bb       	out	0x11, r24	; 17
	// Неактивные входы 8255A
	srd;
  8a:	93 9a       	sbi	0x12, 3	; 18
	swr;
  8c:	94 9a       	sbi	0x12, 4	; 18
	scs;
  8e:	92 9a       	sbi	0x12, 2	; 18
	// Разрешение 8255A и сброс
	ccs;
  90:	92 98       	cbi	0x12, 2	; 18
	srst;
  92:	90 9a       	sbi	0x12, 0	; 18
	asm("nop"); asm("nop"); asm("nop");
  94:	00 00       	nop
  96:	00 00       	nop
  98:	00 00       	nop
	crst;
  9a:	90 98       	cbi	0x12, 0	; 18
	//
	DDRC=0xff;
  9c:	84 bb       	out	0x14, r24	; 20
	out = 0x03; //адрес регистра управления 8255А
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	85 bb       	out	0x15, r24	; 21
	latch_it();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <latch_it>
	out = 0x82;
  a6:	82 e8       	ldi	r24, 0x82	; 130
  a8:	85 bb       	out	0x15, r24	; 21
	cwr;
  aa:	94 98       	cbi	0x12, 4	; 18
	asm("nop");
  ac:	00 00       	nop
	swr;
  ae:	94 9a       	sbi	0x12, 4	; 18

	while(1)
	{ //
		DDRC=0xff;
  b0:	1f ef       	ldi	r17, 0xFF	; 255
		out = 0x01; //адрес на вывод
  b2:	01 e0       	ldi	r16, 0x01	; 1
	asm("nop");
	swr;

	while(1)
	{ //
		DDRC=0xff;
  b4:	14 bb       	out	0x14, r17	; 20
		out = 0x01; //адрес на вывод
  b6:	05 bb       	out	0x15, r16	; 21
		latch_it();
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <latch_it>
		DDRC = 0; //KEY на ввод
  bc:	14 ba       	out	0x14, r1	; 20
		crd;
  be:	93 98       	cbi	0x12, 3	; 18
		asm("nop");
  c0:	00 00       	nop
		temp = in; //данные KEY
  c2:	f3 b2       	in	r15, 0x13	; 19
		srd;
  c4:	93 9a       	sbi	0x12, 3	; 18
		//
		DDRC = 0xff;
  c6:	14 bb       	out	0x14, r17	; 20
		out = 0x00; //адрес на вывод
  c8:	15 ba       	out	0x15, r1	; 21
		latch_it();
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <latch_it>
		out = temp; //данные на LED
  ce:	f5 ba       	out	0x15, r15	; 21
		cwr;
  d0:	94 98       	cbi	0x12, 4	; 18
		asm("nop");
  d2:	00 00       	nop
		swr;
  d4:	94 9a       	sbi	0x12, 4	; 18
  d6:	ee cf       	rjmp	.-36     	; 0xb4 <main+0x3c>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
